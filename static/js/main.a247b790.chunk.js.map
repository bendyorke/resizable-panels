{"version":3,"sources":["helpers.ts","ResizablePanels.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["computeDistribution","start","size","spread","targetIndex","dest","minSize","end","prev","slice","reduce","memo","x","post","min","max","trueDestRel","Math","map","i","Panel","height","width","onVSplit","onHSplit","className","style","onClick","Dragger","initDrag","direction","onMouseDown","Row","initialPanels","rowEl","useRef","useState","panels","setPanels","draggingIndex","setDraggingIndex","panelIndex","panel","index","concat","isCol","clearDraggingIndex","onMouseEnter","onMouseLeave","onMouseMove","event","current","distribution","offsetLeft","clientWidth","clientX","undefined","onMouseUp","ref","Fragment","key","Col","offsetTop","clientHeight","clientY","isRow","ResizablePanels","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a247b790.chunk.js","sourcesContent":["interface ComputeDistribution {\n  start: number\n  size: number\n  spread: number[]\n  targetIndex: number\n  dest: number\n  minSize?: number\n}\n\nexport const computeDistribution = ({\n  start, // Absolute value representing the start of the row/col (offset{Left|Top})\n  size, // Absolute value representing the size of the row/col (client{Width|Height})\n  spread, // Array of relative sizes representing the percent height/width\n  targetIndex, // Index passed to the dragger component, representing subsiquent component\n  dest, // Absolute value representing the cursors position\n  minSize = 72, // Minimum size of a component\n}: ComputeDistribution): number[] => {\n  // Find the end pixel value of the container\n  const end = start + size\n\n  // Calculate relative value accounding for all components prev/post the two components in question\n  const prev = spread.slice(0, targetIndex - 1).reduce((memo, x) => memo + x, 0)\n  const post = spread.slice(targetIndex + 1).reduce((memo, x) => memo + x, 0)\n\n  // Calculate the min/max for absolute value of the drop location\n  // These are the min/max pixel values acceptable for dest\n  const min = size * (prev / 100) + minSize + start\n  const max = end - (size * (post / 100) + minSize)\n\n  // Limit the destination within the absolute min/max bounds\n  const boundDest = Math.max(min, Math.min(max, dest))\n\n  // Find the offset value for the boundDest relative to the start of the row/col\n  // Convert this to relative units represented as a %\n  const offsetDest = boundDest - start\n  const trueDestRel = (offsetDest / size) * 100\n\n  // Return a new array containing the new relative sizes\n  // Since the number of components is the same, this will be easy to update\n  return spread.map((x, i) => {\n    // If the target comes before the split, set the new value relative to all post components\n    if (i === targetIndex - 1) return trueDestRel - prev\n    if (i === targetIndex) return 100 - (trueDestRel + post)\n    return x\n  })\n}\n","import React, {useRef, useState, FunctionComponent} from 'react'\nimport './ResizablePanels.css'\nimport {computeDistribution} from './helpers'\n\n// PANEL ////////////////////////////////////////////////////////////////////\n\ntype PanelDimensions = {\n  height?: number\n  width?: number\n}\n\ntype PanelProps = PanelDimensions & {\n  onHSplit: () => void\n  onVSplit: () => void\n}\n\nconst Panel: FunctionComponent<PanelProps> = ({\n  height = 100,\n  width = 100,\n  onVSplit,\n  onHSplit,\n}) => {\n  return (\n    <div className=\"Panel\" style={{height: height + '%', width: width + '%'}}>\n      <header className=\"Panel-controls\">\n        <div className=\"Panel-control\" onClick={onVSplit}>\n          üÄ±\n        </div>\n        <div className=\"Panel-control Panel-controlHSplit\" onClick={onHSplit}>\n          üÅ£\n        </div>\n      </header>\n      <main className=\"Panel-main\"></main>\n      <footer className=\"Panel-footer\"></footer>\n    </div>\n  )\n}\n\n// DRAGGER //////////////////////////////////////////////////////////////////\n\ntype DraggerProps = {\n  initDrag: () => void\n  direction?: string\n}\n\nconst Dragger: FunctionComponent<DraggerProps> = ({initDrag, direction}) => {\n  return (\n    <div\n      className={`Dragger ${direction ? 'Dragger-' + direction : ''}`}\n      onMouseDown={(): void => initDrag()}\n    ></div>\n  )\n}\n\n// ROW //////////////////////////////////////////////////////////////////////\n\ninterface RowPanel {\n  width: number\n  isCol?: boolean\n}\n\ntype RowProps = {\n  height: number\n  initialPanels?: RowPanel[]\n}\n\nconst Row: FunctionComponent<RowProps> = ({\n  height,\n  initialPanels = [{width: 50}, {width: 50}],\n}) => {\n  const rowEl = useRef<HTMLDivElement>(null)\n  const [panels, setPanels] = useState<RowPanel[]>(initialPanels)\n  const [draggingIndex, setDraggingIndex] = useState<number>(-1)\n\n  const onVSplit = (panelIndex: number) => (): void => {\n    setPanels(\n      panels.reduce((memo: Array<RowPanel>, panel: RowPanel, index: number) => {\n        if (panelIndex === index) {\n          return memo.concat([\n            {width: panel.width / 2},\n            {width: panel.width / 2},\n          ])\n        } else {\n          return memo.concat([panel])\n        }\n      }, [])\n    )\n  }\n\n  const onHSplit = (panelIndex: number) => (): void => {\n    setPanels(\n      panels.reduce((memo: Array<RowPanel>, panel: RowPanel, index: number) => {\n        if (panelIndex === index) {\n          return memo.concat([{...panel, isCol: true}])\n        } else return memo.concat([panel])\n      }, [])\n    )\n  }\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>): void => {\n    if (rowEl.current) {\n      const distribution = computeDistribution({\n        start: rowEl.current.offsetLeft,\n        size: rowEl.current.clientWidth,\n        spread: panels.map(x => x.width),\n        targetIndex: draggingIndex,\n        dest: event.clientX,\n      })\n\n      setPanels(panels.map((panel, i) => ({...panel, width: distribution[i]})))\n    }\n  }\n\n  const clearDraggingIndex = (): void => setDraggingIndex(-1)\n\n  return (\n    <div\n      className=\"Row\"\n      onMouseEnter={clearDraggingIndex}\n      onMouseLeave={clearDraggingIndex}\n      onMouseMove={draggingIndex > -1 ? handleMouseMove : undefined}\n      onMouseUp={clearDraggingIndex}\n      ref={rowEl}\n      style={{height: height + '%'}}\n    >\n      {panels.map(({width, isCol}, index) => (\n        <React.Fragment key={index}>\n          {index > 0 && (\n            <Dragger\n              initDrag={(): void => setDraggingIndex(index)}\n              direction=\"horizontal\"\n            />\n          )}\n          {isCol ? (\n            <Col width={width} />\n          ) : (\n            <Panel\n              width={width}\n              onVSplit={onVSplit(index)}\n              onHSplit={onHSplit(index)}\n            />\n          )}\n        </React.Fragment>\n      ))}\n    </div>\n  )\n}\n\n// COL //////////////////////////////////////////////////////////////////////\n\ninterface ColPanel {\n  height: number\n  isRow?: boolean\n}\n\ntype ColProps = {\n  width: number\n  initialPanels?: ColPanel[]\n}\n\nconst Col: FunctionComponent<ColProps> = ({\n  initialPanels = [{height: 50}, {height: 50}],\n  width,\n}) => {\n  const rowEl = useRef<HTMLDivElement>(null)\n  const [panels, setPanels] = useState<ColPanel[]>(initialPanels)\n  const [draggingIndex, setDraggingIndex] = useState<number>(-1)\n\n  const onHSplit = (panelIndex: number) => (): void => {\n    setPanels(\n      panels.reduce((memo: Array<ColPanel>, panel: ColPanel, index: number) => {\n        if (panelIndex === index) {\n          return memo.concat([\n            {height: panel.height / 2},\n            {height: panel.height / 2},\n          ])\n        } else {\n          return memo.concat([panel])\n        }\n      }, [])\n    )\n  }\n\n  const onVSplit = (panelIndex: number) => (): void => {\n    setPanels(\n      panels.reduce((memo: Array<ColPanel>, panel: ColPanel, index: number) => {\n        if (panelIndex === index) {\n          return memo.concat([{...panel, isRow: true}])\n        } else return memo.concat([panel])\n      }, [])\n    )\n  }\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>): void => {\n    if (rowEl.current) {\n      const distribution = computeDistribution({\n        start: rowEl.current.offsetTop,\n        size: rowEl.current.clientHeight,\n        spread: panels.map(x => x.height),\n        targetIndex: draggingIndex,\n        dest: event.clientY,\n      })\n\n      setPanels(panels.map((panel, i) => ({...panel, height: distribution[i]})))\n    }\n  }\n\n  const clearDraggingIndex = (): void => setDraggingIndex(-1)\n\n  return (\n    <div\n      className=\"Col\"\n      onMouseEnter={clearDraggingIndex}\n      onMouseLeave={clearDraggingIndex}\n      onMouseMove={draggingIndex > -1 ? handleMouseMove : undefined}\n      onMouseUp={clearDraggingIndex}\n      ref={rowEl}\n      style={{width: width + '%'}}\n    >\n      {panels.map(({height, isRow}, index) => (\n        <React.Fragment key={index}>\n          {index > 0 && (\n            <Dragger\n              initDrag={(): void => setDraggingIndex(index)}\n              direction=\"vertical\"\n            />\n          )}\n          {isRow ? (\n            <Row height={height} />\n          ) : (\n            <Panel\n              height={height}\n              onVSplit={onVSplit(index)}\n              onHSplit={onHSplit(index)}\n            />\n          )}\n        </React.Fragment>\n      ))}\n    </div>\n  )\n}\n\n// RESIZABLE PANELS /////////////////////////////////////////////////////////\n\ntype ResizablePanelsType = {\n  Row: FunctionComponent<RowProps>\n  Col: FunctionComponent<ColProps>\n}\n\ntype ResizablePanelsProps = {\n  children?: React.ReactNode\n}\n\nconst ResizablePanels: FunctionComponent<ResizablePanelsProps> &\n  ResizablePanelsType = ({children}) => {\n  return (\n    <div className=\"ResizablePanels\">\n      <Row initialPanels={[{width: 100}]} height={100} />\n    </div>\n  )\n}\n\n// Assign Row and Col components to default export\nResizablePanels.Row = Row\nResizablePanels.Col = Col\n\nexport default ResizablePanels\n","import React, {FunctionComponent} from 'react'\nimport './App.css'\nimport ResizablePanels from './ResizablePanels'\n\ntype AppProps = {}\n\nconst App: FunctionComponent<AppProps> = () => {\n  return (\n    <div className=\"App\">\n      <ResizablePanels />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}